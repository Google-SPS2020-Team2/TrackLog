FORMAT: 1A
HOST: https://localhost:5000/

#TrackLog
A webapp to track the music pieces you played!

# User's Identity Information Administration
Provide administration for users' information.

Currently only basic APIs are designed. Features like change nickname or password maybe added later.

## User Account[/createAccount]
Provide administration for users' account.

### Create account [POST]
Create a new account.

Request: User's nickName and password. Password should be encrypted by frontend before sent to backend.

Response: Return a message to indicate whether the account is created successfully.

+ Request (application/json)

        {
            "name": "nickName",
            "password": "encrypted password"
        }

+ Response 200 (application/json)

        {
            status: "Fail",
            errorMessage: "The nickName duplicated"
        }

## User Login[/login]
User login.

### Login [POST]
Request: The input nickName and password. Password should be encrypted by frontend before sent to backend.

Response: Return a message to indicate whether the user login successfully. If success, return a sessionID for further use.

+ Request (application/json)

        {
            "name": "nickName",
            "password": "encrypted password"
        }

+ Response 200 (application/json)

        {
            status: "fail",
            errorMessage: "The nickName duplicated",
            sessionID: "An temporary sessionID generated by backend to identify the user"
        }

# User's Music Pieces Administration
Provide administration for users' music.

## Favored music collection[/favoredMusic]
To add and show music list of a user.

### Get favored music list [Get]
Get a list of user's favored music pieces along with their basic information.

+ Parameters
    + sessionID (string) - sessionID get from backend for identification
    + limit (number) - the maximal number of music pieces returned
    + timestamp (number) - return the music pieces with a timeStamp smaller than this parameter

+ Response 200 (application/json)

        {
            [
                {
                    "musicId": 1,
                    "name": "Example Music",
                    "composer": "John Smith",
                    "createdTime": 1993,
                    "type": "classic music",
                    "played": True,
                    "timeStamp": 324212313424
                }
            ]
        }

### Add favored music [Post]
Add a new piece of music

Request: Basic information of the new piece of music.

Response: Return a message to indicate whether the music piece is added successfully.

+ Request (application/json)

        {
            "sessionID": sessionID get from backend for identification
            "name": "Example Music",
            "composer": "John Smith",
            "year": 1993,
            "type": "classic music"
        }

+ Response 200 (application/json)

        {
            status: "fail",
            errorMessage: "This piece of music already existed",
        }

## Favored music piece[/favoredMusicPiece]
Dealing with a single music piece.

### Delete [Post]
Delete the music from user's favored list
    + Request (application/json)

        {
            "sessionID": sessionID get from backend for identification,
            "musicID": ID of the piece of music to be deleted
        }

    + Response 200 (application/json)

        {
            status: "success",
            errorMessage: None
        }

## Played music collection[/playedMusic]
Provide administration for users' played music.

### Marked as played [Post]
Mark a piece of music to be played.

Request: Basic information of the new piece of music.

Response: Return a message to indicate whether the music piece is added successfully.

+ Request (application/json)

        {
            "sessionID": sessionID get from backend for identification,
            "musicID": ID of the piece of music to be deleted
        }

+ Response 200 (application/json)

        {
            status: "success",
            errorMessage: None,
        }

## Played music piece[/playedMusicPiece]
Dealing with a single music piece.

### Delete [DELETE]
Delete the mark of music being played.
    + Request (application/json)

        {
            "sessionID": sessionID get from backend for identification,
            "musicID": ID of the piece of music
        }

    + Response 200 (application/json)

        {
            status: "success",
            errorMessage: None
        }